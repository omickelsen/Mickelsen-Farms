
var Point = {

    Queues: {
        Default: $.manageAjax.create('default', {
            queue: true,
            cacheResponse: true
        })
    },
    ServiceExecutionOptions: {
        DefaultHandleErrorCallback: function () { },
        Format: {
            JSON: "json",
            HTML: "html",
            TEXT: "text",
            CUSTOM: "custom"
        }
    },

     Logout: function(){
        window.location = logoutUrl(escape(logoutUrlRedirect()));
    }
};


/* Remove "nojs" class from body tag if Javascript is enabled */
Point.enableJavascript = function () {
    $("body").removeClass("nojs");
};

Point.Inititalize = function() {
    Point.BindModal();
};

Point.BindModal = function (e) {
    var options = {
        scrolling: true,
        opacity: .5,
        overlayClose: true,
        initialHeight: 100,
        initialWidth: 300,
        close: "",
        onCleanup: function () {
            $('#colorbox iframe').attr('src', 'about:blank');
        }
    };

    var fixedSizeOptions = {
        scrolling: true,
        height: '90%',
        opacity: .5,
        initialHeight: 100,
        initialWidth: 300,
        overlayClose: true,
        width: '810px',
        close: "",
        onComplete: function () {
            if ($('#currentRenderingHtmlContainer').length > 0) {
                $('#modal_wrapper3').colorbox.resize({ height: '90%', width: '1060px' });
            }
        },
        onCleanup: function () {
            $('#colorbox iframe').attr('src', 'about:blank');
        }
    };

    var inlineOptions = {
        scrolling: true,
        opacity: .5,
        overlayClose: true,
        initialHeight: 100,
        initialWidth: 300,
        maxWidth: '810px',
        close: '',
        onCleanup: function () {
            $('#colorbox iframe').attr('src', 'about:blank');
        }
        
    };

    var conceptHeight = '38%';
    if ($.browser.msie) {
        conceptHeight = '280px';
        if ($.browser.version < "8.0") conceptHeight = '325px';
    }
    var conceptBasedSubsiteFixedSizeOptions = {
        scrolling: false,
        height: conceptHeight, //customize height
        opacity: .5,
        initialHeight: 100,
        initialWidth: 300,
        overlayClose: true,
        width: '810px',
        onComplete: function () {
            if ($('#currentRenderingHtmlContainer').length > 0) {
                $('#modal_wrapper3').colorbox.resize({ height: '90%', width: '300px' });
            }
        },
        onCleanup: function () {
            $('#colorbox iframe').attr('src', 'about:blank');
        }
    };

    if ($.browser.msie && $.browser.version < "8.0") {
        options.width = "900px";
    }


    $('.modal').each(function(i, link) {
        
        $link = $(link);
       
        var opt = options;

        if ($link.attr('data-options')) {
            $.extend(opt, $link.data('options'));
        }


        $link.colorbox(
            opt
        );
    });        
        
        

    $('.modalFixedSize').colorbox(
        fixedSizeOptions
    );
    $('.inlineModal').each(function () {
        var opt = inlineOptions;
       
        opt.html = $($(this).attr('href')).html();
        $(this).colorbox(opt);
    });

    $('.modalConceptBasedSubsiteFixedSize').colorbox(
        conceptBasedSubsiteFixedSizeOptions
    );

    $('.modal').click(function (e) {
        e.preventDefault();
    });

    $('.closeModal').click(function (e) {
        e.preventDefault();
        $.colorbox.close();
    });
};

var navigationQueue = new Array();

Point.NavigationService = {
    AddToQueue: function (f) {
        navigationQueue.push(f);
    },
    Back: function () {
        var f = navigationQueue.pop();

        var len = navigationQueue.length;

        if (len > 0) {
            var last = navigationQueue.pop();

            last();
            navigationQueue.push(last);
        }
        else {
            f();
            navigationQueue.push(f);
        }
    },
    ClearQueue: function () {
        navigationQueue = new Array();
    }

};

var backQueue = {};
Point.BackService = {
    Load: function (hash, callBack, skipLoad) {
        hash = unescape(hash);
        backQueue[hash] = callBack;

        if (!skipLoad) {
            $.history.load(hash);
        }

        return false;
    },
    Back: function (hash) {
        hash = unescape(hash);
        if (backQueue[hash] != null && backQueue[hash] != undefined) {
            var fun = backQueue[hash];
            fun();
            return false;
        }
    },
    Init: function () {
        window.location.hash = '';
        backQueue = {};
        $.history.init(Point.BackService.Back);
    }
};

Point.AssetsToRelease = [];

Point.AssetsToReleaseContext = {
    ProductId: ''
};

Point.BindReleaseManagement = function () {
    $('.pending_change').unbind('click');

    $('body').on('change', '.pending_change', function (e) {
        var checked = $(this).is(':checked');
        
        var assetId = $(this).attr('assetId');
        var container = $(this).parent().parent();
        container.find('.pending_change').each(function (index, child) {
            var childAssetId = $(child).attr('assetId');
            if (checked) {
                Point.AssetsToRelease[childAssetId] = '';
            } else {
                delete Point.AssetsToRelease[childAssetId];
            }
        });
        
        if (checked) {
            Point.AssetsToRelease[assetId] = '';
        } else {
            delete Point.AssetsToRelease[assetId];
        }
    });

    $('#releaseSelectedChanges').unbind('click');

    $('#releaseSelectedChanges:not(.releaseSelectedChangeLink)').click(function (e) {
        e.preventDefault();
        var serviceUrl = $(this).attr('href');
        var parameter = {
            ProductId: Point.AssetsToReleaseContext.ProductId,
            AssetIdsToRelease: []
        };

        for (var change in Point.AssetsToRelease) {
            parameter.AssetIdsToRelease[parameter.AssetIdsToRelease.length] = change;
        }

        var serializedParameter = $.toJSON(parameter);

        $.executeService(serviceUrl, serializedParameter, function (data) {
            //console.log(data);
        });
    });

};


/* Create dead link tooltips */
Point.blockDeadLinks = function() {
    $("a.deadlink").attr("title", "This link is not active for this demo.");
    $("a.deadlink").tooltip({
        showURL: false,
        fade: 250,
        top: 15,
        left: 5
    });
    $('a.deadlink').click(function() {
        return false;
    });
};

/* Add Mac stylesheet for certain font issues, where appropriate */
Point.enableMacStyles = function (macCss) {
    var isMac = false;
    var macStyle = '<link rel="stylesheet" type="text/css" href="' + macCss + '" media="all" />';
    if ((navigator.userAgent.indexOf('Mac') != -1) || (navigator.userAgent.indexOf('iPhone') != -1)) {
        isMac = true;
    };
    if (isMac) {
        $("head").append(macStyle);
    };
};

/* Top nav menu dropdown */
//On Hover Over
function dropdownHoverOver() {
    $(this).find(".submenu").stop().fadeTo('fast', 1).show(); //Find sub and fade it in
    $(this).find("img.uparrow").show();
    $(this).find("img.downarrow").hide();
    //$('#slider').data('nivo:vars').stop = true;
};
//On Hover Out
function dropdownHoverOut() {
    $(this).find(".submenu").stop().fadeTo('fast', 0, function () { //Fade to 0 opactiy
        $(this).hide();  //after fading, hide it
    });
    $(this).find("img.uparrow").hide();
    $(this).find("img.downarrow").show();
    //$('#slider').data('nivo:vars').stop = false;
};



(function ($) {

    $.ShowLoading = function () {

    };
    $.RemoveLoading = function () {

    };


    $.defaultHandleResponseEnvelopeCallback = function (response, onSuccessCallback) {

        if (response == "") {
            return;
        }

      
        if (response.ValidationMessages && response.ValidationMessages.length > 0) {
            var summaryBlock = $('#ValidationSummary');

            if (summaryBlock.length == 0) {
                summaryBlock = $('.validation_summary');
            }

            if (summaryBlock.length == 1) {

                var form = summaryBlock.parent('form');
                var hasMemberErrors = false;
                var hasErrors = false;
                var memberErrors = new Array();
                var errors = new Array();

                for (var i = 0; i < response.ValidationMessages.length; i++) {
                    if (response.ValidationMessages[i].MemberName) {
                        hasMemberErrors = true;
                        memberErrors[response.ValidationMessages[i].MemberName] = response.ValidationMessages[i].Message;
                    }
                    else {
                        hasErrors = true;
                        errors[errors.length] = response.ValidationMessages[i].Message;
                    }
                }
                if (hasMemberErrors) {
                    $(form).validate().showErrors(memberErrors);
                }


                if (hasErrors) {

                    var html = '<span class="validation-summary-errors">Please fix the following problems:</span><ul>';
                    for (i = 0; i < errors.length; i++) {
                        html = html + $.validator.format('<li style="display: list-item;"><span class="field-validation-error" generated="true" style="display: block;">{0}</span></li>', errors[i]);
                    }

                    html = html + '</ul>';

                    summaryBlock.html(html);
                    summaryBlock.attr('style', '');
                }


            }
            else {

                var formatedMessage = "";

                for (i = 0; i < response.ValidationMessages.length; i++) {
                    formatedMessage = formatedMessage + response.ValidationMessages[i].Message + "<br/>";
                }

                $.Prompts.Error("<h3>Please fix the following problems:</h3>" + formatedMessage);

            }
        }

        if (response.WarningMessages && response.WarningMessages.length > 0) {
            $.defaultHandleWarningCallback(response.WarningMessages);
        }

        if (response.InformationalMessages && response.InformationalMessages.length > 0) {
            $.defaultHandleInformationalCallback(response.InformationalMessage);
        }

        if (response.ErrorMessages && response.ErrorMessages.length > 0) {
            $.defaultHandleErrorMessageCallback(response.ErrorMessages);
        }
        if (response.RedirectToLocation && response.RedirectToLocation != "") {
            if (window.location == response.RedirectToLocation) {
                window.location.reload(false);
            }
            else {
                window.location = response.RedirectToLocation;
            }
        }
        if (onSuccessCallback && response.Successful) {
            onSuccessCallback(response.Data);
        }
    };

    $.SerializeForm = function (form) {
        var elements = $.makeArray(form.elements);

        serializedForm = {};

        for (var i = 0; i < elements.length; i++) {
            var element = elements[i];

            if (!element.name) {
                continue;
            }

            if (element.type == "checkbox") {
                serializedForm[element.name] = $(element).attr('checked');
            }
            else {
                serializedForm[element.name] = $(element).val();
            }
        }
        serializedForm = $.toJSON(serializedForm);

        return serializedForm;
    };

    $.fn.AjaxSubmit = function (callback) {
        return this.AjaxSubmitWithCustomSerializer($.SerializeForm, Point.ServiceExecutionOptions.Format.JSON, callback);
    };

    $.fn.AjaxSubmitWithCustomResponseDataType = function (responseDataType, callback) {
        return this.AjaxSubmitWithCustomSerializer($.SerializeForm, responseDataType, callback);
    };

    $.fn.AjaxSubmitWithCustomSerializer = function (serializedFormCallBack, responseDataType, callback) {

        this.submit(function (e) {

            e.preventDefault();
            var form = $(this);
            if (form.validate) {
                if (!form.validate().valid()) {
                    return false;
                }
            }
            var serializedForm = serializedFormCallBack(this);
            $.executeService(form.attr("action"), serializedForm, responseDataType, function (data) {
                if (callback) {
                    callback(data);
                }
            });
        });

        return this;
    };

    $.formatDate = function(date) {
        //6/10/2010 1:36:14 PM

        var hour = date.getHours();
        var xm = "AM";

        if (hour > 12) {
            hour = hour - 12;
            xm = "PM";
        }

        return date.getMonth() + 1 + '/' + date.getDate() + +'/' + date.getFullYear() + ' ' + hour + ':' + date.getMinutes() + ':' + date.getSeconds() + ' ' + xm;

    };

    $.defaultHandleErrorCallback = function (xhr, status, error) {
        if (window.console && window.console.error) {
            console.error(arguments);
        }

        $.Prompts.Error("<p>Error:<br />Internal Server Error</p>");
    };

    $.defaultHandleWarningCallback = function (message) {
        if (window.console && window.console.error) {
            console.error(arguments);
        }
        var formatedMessage = "";

        for (var i = 0; i < message.length; i++) {
            formatedMessage = formatedMessage + message[i] + "<br/>";
        }

        $.Prompts.Warn("<h3>Warning:</h3>" + formatedMessage, null);
    };

    $.defaultHandleInformationalCallback = function (message) {
        if (window.console && window.console.error) {
            console.error(arguments);
        }

        var formatedMessage = "";

        for (var i = 0; i < message.length; i++) {
            formatedMessage = formatedMessage + message[i] + "<br/>";
        }

        $.Prompts.Help(formatedMessage);
    };

    $.defaultHandleErrorMessageCallback = function (message) {
        if (window.console && window.console.error) {
            console.error(arguments);
        }

        var formatedMessage = "";

        for (var i = 0; i < message.length; i++) {
            formatedMessage = formatedMessage + message[i] + "<br/>";
        }

        $.Prompts.Error(formatedMessage);
    };


    $.Prompts = {
        Message: function (text, callBack) {
            text = text.replace('\n', '<br/>');


            if (callBack) {
                $.prompt(text, { buttons: { Ok: true }, callback: callBack });
            }
            else {
                $.prompt(text, { buttons: { Ok: true} });
            }
            return this;
        },
        Error: function (text, callBack) {
            text = text.replace('\n', '<br/>');

            if (callBack) {
                $.prompt(text, { buttons: { Ok: true }, prefix: 'errorjqi', callback: callBack });
            }
            else {
                $.prompt(text, { buttons: { Ok: true }, prefix: 'errorjqi' });
            }
            return this;
        },
        Warn: function (text, callBack) {
            text = text.replace('\n', '<br/>');

            if (!callBack) {
                $.prompt(text, { buttons: { Ok: true }, prefix: 'warningjqi' });
            }
            else {
                $.prompt(text, { buttons: { Ok: true }, prefix: 'warningjqi', callback: callBack });
            }
            return this;
        },
        Confirm: function (text, callBack) {
            text = text.replace('\n', '<br/>');

            if (!callBack) {
                $.prompt(text, { buttons: { Yes: true, No:false }, prefix: 'warningjqi' });
            }
            else {
                $.prompt(text, { buttons: { Yes: true, No:false}, prefix: 'warningjqi', callback: callBack });
            }
            return this;
        },
        Help: function (text, callBack) {
            text = text.replace('\n', '<br/>');

            if (callBack) {
                $.prompt(text, { buttons: { Ok: true }, prefix: 'helpjqi', callback: callBack });
            }
            else {
                $.prompt(text, { buttons: { Ok: true }, prefix: 'helpjqi' });
            }
            return this;
        }
    };

    $.executeServiceInChannel = function ($serviceUrl, $port, $param, $responseDataType, $option, $onSuccessCallback, $handleErrorCallback) {

        var handleErrorCallback = $.defaultHandleErrorCallback;
        var restServiceUrl;
        var onsucessCallback;
        var options;
        var param = "{}";
        var responseDataType = Point.ServiceExecutionOptions.Format.JSON;

        if (arguments.length == 2) {
            restServiceUrl = arguments[0];
            onsucessCallback = arguments[1];
        }
        else if (arguments.length == 3) {
            restServiceUrl = arguments[0];
            if (arguments[1]) {
                param = arguments[1];
            }
            onsucessCallback = arguments[2];
        }

        else if (arguments.length == 4) {

            restServiceUrl = arguments[0];
            if (arguments[1]) {
                param = arguments[1];
            }
            responseDataType = arguments[2];
            onsucessCallback = arguments[3];
        }
        else if (arguments.length == 5) {
            restServiceUrl = arguments[0];
            param = arguments[2];
            responseDataType = arguments[3];
            onsucessCallback = arguments[4];
        }
        else {
            restServiceUrl = $serviceUrl;
            onsucessCallback = $onSuccessCallback;
            options = $option;

            if ($param) {
                param = $param;
            }

            if ($responseDataType) {
                responseDataType = $responseDataType;
            }

            if ($handleErrorCallback) {
                handleErrorCallback = $handleErrorCallback;
            }
        }

        $.ajax({
            // try to leverage ajaxQueue plugin to abort previous requests
            mode: "abort",
            // limit abortion to this input
            port: $port,
            type: "POST",
            contentType: "application/json; charset=utf-8",
            url: $.AppendQueryString(restServiceUrl, "format=" + responseDataType),
            data: param,
            dataType: Point.ServiceExecutionOptions.Format.JSON,
            success: function (response) {
                $.defaultHandleResponseEnvelopeCallback(response, onsucessCallback);
            },
            error: function (xhr, status, error) {
                if(xhr.status === 0 || xhr.readyState === 0)
                    return;
                
                handleErrorCallback(xhr, status, error);
            }
        });

        return this;
    };

    $.executeSynchronousService = function ($serviceUrl, $param, $responseDataType, $option, $handleErrorCallback) {


        var handleErrorCallback = $.defaultHandleErrorCallback;
        var restServiceUrl;
        var options;
        var responseDataType = Point.ServiceExecutionOptions.Format.JSON;
        var param;


        if (arguments.length == 2) {
            restServiceUrl = arguments[0];
            param = arguments[1];
        }
        else if (arguments.length == 3) {
            restServiceUrl = arguments[0];
            param = arguments[1];
            responseDataType = arguments[2];
        }
        else {
            restServiceUrl = $serviceUrl;
            options = $option;

            if ($param) {
                param = $param;
            }

            if ($responseDataType) {
                responseDataType = $responseDataType;
            }

            if ($handleErrorCallback) {
                handleErrorCallback = $handleErrorCallback;
            }
        }
        if (!param) {
            param = "{}";
        }
        var xmlResponse = $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            url: $.AppendQueryString(restServiceUrl, "format=" + responseDataType),
            data: param,
            dataType: Point.ServiceExecutionOptions.Format.JSON,
            async: false,
            error: function (xhr, status, error) {

                handleErrorCallback(xhr, status, error);
            }

        });
        var response = $.evalJSON(xmlResponse.responseText);


        if (response.WarningMessage && response.WarningMessage != "") {
            $.defaultHandleWarningCallback(response.WarningMessage);
        }

        if (response.InformationalMessage && response.InformationalMessage != "") {
            $.defaultHandleInformationalCallback(response.InformationalMessage);
        }

        return response.Data;



    };

    $.executeJsonPService = function ($serviceUrl, $param, $responseDataType, $option, $onSuccessCallback, $handleErrorCallback) {
        var handleErrorCallback = $.defaultHandleErrorCallback;
        var restServiceUrl;
        var onsucessCallback;
        var options;
        var responseDataType = Point.ServiceExecutionOptions.Format.JSON;
        var param = null;

        if (arguments.length == 2) {
            restServiceUrl = arguments[0];
            onsucessCallback = arguments[1];
        }

        else if (arguments.length == 3) {
            restServiceUrl = arguments[0];
            param = arguments[1];
            onsucessCallback = arguments[2];
        }
        else if (arguments.length == 4) {
            restServiceUrl = arguments[0];
            param = arguments[1];
            responseDataType = arguments[2];
            onsucessCallback = arguments[3];
        }
        else {
            restServiceUrl = $serviceUrl;
            onsucessCallback = $onSuccessCallback;
            options = $option;

            if ($param) {
                param = $param;
            }

            if ($responseDataType) {
                responseDataType = $responseDataType;
            }

            if ($handleErrorCallback) {
                handleErrorCallback = $handleErrorCallback;
            }
        }

        var contentType = "application/json; charset=utf-8";

        if (!param) {
            param = "{}";
        }

        var url = $.AppendQueryString($serviceUrl, 'callback=_jqjsp');

        url = $.toQueryParams(url, $param);
        $.jsonp(
        {
            "url": url,
            "success": function (response) {
                $.defaultHandleResponseEnvelopeCallback(response, onsucessCallback);
            },
            "error": function (xhr, status, error) {
                if (xhr.status == 0) {
                    return;
                }
                handleErrorCallback(xhr, status, error);
            }
        });




        return this;
    };


    $.executeService = function ($serviceUrl, $param, $responseDataType, $option, $onSuccessCallback, $handleErrorCallback) {
        var handleErrorCallback = $.defaultHandleErrorCallback;
        var restServiceUrl;
        var onsucessCallback;
        var options;
        var responseDataType = Point.ServiceExecutionOptions.Format.JSON;
        var param = null;

        if (arguments.length == 2) {
            restServiceUrl = arguments[0];
            onsucessCallback = arguments[1];
        }

        else if (arguments.length == 3) {
            restServiceUrl = arguments[0];
            param = arguments[1];
            onsucessCallback = arguments[2];
        }
        else if (arguments.length == 4) {
            restServiceUrl = arguments[0];
            param = arguments[1];
            responseDataType = arguments[2];
            onsucessCallback = arguments[3];
        }
        else {
            restServiceUrl = $serviceUrl;
            onsucessCallback = $onSuccessCallback;
            options = $option;

            if ($param) {
                param = $param;
            }

            if ($responseDataType) {
                responseDataType = $responseDataType;
            }

            if ($handleErrorCallback) {
                handleErrorCallback = $handleErrorCallback;
            }
        }

        var contentType = "application/json; charset=utf-8";

        if (!param) {
            param = "{}";
        }
         $.ajax({
            // try to leverage ajaxQueue plugin to abort previous requests
            mode: "abort",
            // limit abortion to this input
            port: null,
            type: "POST",
            contentType: contentType,
            url: $.AppendQueryString(restServiceUrl, "format=" + responseDataType),
            data: param,
            dataType: Point.ServiceExecutionOptions.Format.JSON,
            success: function (response) {
                $.defaultHandleResponseEnvelopeCallback(response, onsucessCallback);
            },
            error: function (xhr, status, error) {
                if(status == 'abort') {
                    return;
                }
                handleErrorCallback(xhr, status, error);
            }
        });


        return this;
    };

    $.AppendQueryString = function (url, data) {
        if (url.indexOf('?') >= 0) {
            return url + '&' + data;
        }
        else {
            return url + '?' + data;
        }

        return this;
    };

    $.toMSJSON = function (data) {
        var date = '\/Date(' + data.getTime() + ')\/';
        return date;
    };

    $.toQueryParams = function (url, data) {
        for (var item in data) {
            var param = "";

            if (data[item] != null && data[item] != undefined) {
                param = escape(data[item]);
            }

            url = $.AppendQueryString(url, item + '=' + param);
        }

        return url;
    };

    $.log = function (data) {
        if (window.console && window.console.debug) {
            console.debug(data);
        }

    };

})(jQuery);


var CloseColorbox = function () {
    $.colorbox.close();
}

$(document).bind('cbox_open', function () {
    $('section#main, #body-header, #body-footer').attr("aria-hidden", "true");
});

$(document).bind('cbox_closed', function () {
    $('section#main, #body-header, #body-footer').attr("aria-hidden", "false");
});

$(document).on("keydown", "#cboxContent", function (e) {
    var firstcontrol = $("#cboxLoadedContent").find("*:focusable").first();
    var lastcontrol = $("#cboxLoadedContent").find("*:focusable").last();
    if (!e.shiftKey && e.keyCode == 9 && $(lastcontrol).is(":focus")) {
        e.preventDefault();
        $(firstcontrol).focus();
    } else if (e.shiftKey && e.keyCode == 9 && $(firstcontrol).is(":focus")) {
        e.preventDefault();
        $(lastcontrol).focus();
    }
});



